#1.java安全性
   使用引用类型取代了指针类型，
   拥有一套异常处理机制，通过throw，throws，try，catch，finally等关键字。
   不需要程序员显示释放，jvm有垃圾回收机制
   强制类型转换需要一定的规则

#2.java三大特性

##2.1 封装
     封装从字面上来理解就是包装的意思,专业点就是信息隐藏,是指利用抽象数据类型将数据和基于数据的操作封装在一起,使其构成一个不可。
     分割的独立实体。 数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口。
     系统的其他对象只能通过这些对外接口来与这个封装的对象进行交互。
     也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外的提供的接口来访问该对象。
     对于封装而言，一个对象它所封装的是自己的属性和方法，所以它是不需要依赖其他对象就可以完成自己的操作。

##2.2 继承
      对于若干个相同或者相识的类可以抽象出他们共有的行为或这属性并将其定义成一个父类或者超类，然后用这些类继承该父类。
      这样，他们不仅可以拥有父类的属性、方法还可以定义自己独有的属性或者方法。
      实际上继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有得特性。
      通过使用继承我们能够非常方便地复用以前的代码，能够大大的提高开发的效率。

      重用父类代码，为多态做铺垫。

      在使用继承时需要记住三句话：
          1. 子类拥有父类非private的属性和方法，但不包括构造器，对于构造器而言，它只能够被调用，而不能被继承。
             调用父类的构造方法我们使用super()即可。
          2. 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。
          3. 子类可以用自己的方式实现父类的方法。

##2.3 多态
      多态目的：增加代码的灵活度。

      实现多态的必要条件：继承、重写、向上转型。
      继承：在多态中必须存在有继承关系的子类和父类。
      重写：子类对父类中的某些方法进行重新定义，在调用这些方法时就会调用子类的方法。
      向上转型：将父类引用指向子类对象，只有这样，该引用才具备调用子类方法的能力。

       实现形式：
       基于继承实现的多态。
       基于接口实现的多态。


#3. 注解
##3.1 什么是注解

注解可以向编译器、虚拟机等解释说明一些事情。比如，当我们在子类当中覆写父类的aMethod方法时，在子类的aMethod上会用@Override来
修饰它，反之，如果我们给子类的bMethod用@Override注解修饰，但是在它的父类当中并没有这个bMethod，那么就会报错。
这个@Override就是一种注解，它的作用是告诉编译器它所注解的方法是重写父类的方法，这样编译器就会去检查父类是否存在这个方法。
注解是用来描述Java代码的，它既能被编译器解析，也能在运行时被解析。

##3.2元注解

元注解是描述注解的注解，也是我们编写自定义注解的基础，
比如以下代码中我们使用@Target元注解来说明MethodInfo这个注解只能应用于对方法进行注解：

```
    @Target(ElementType.METHOD)
    public @interface MethodInfo {
        //....
    }
```

